import pandas as pd
import yaml
import helperFun

configfile: "config/config.yaml"

helperFun.make_temp_dir()
samples = pd.read_table(config["samples"], sep=",", dtype=str).replace(' ', '_', regex=True)
species_counts = samples.drop_duplicates(subset = ["BioSample", "refGenome", "Organism"]).value_counts(subset=['refGenome', 'Organism'])  #get BioSample for each refGenome/Organism combination
REFGENOME,ORGANISM = map(list, zip(*species_counts.index))  # split index into ref genome and organism

def get_output(refGenome, Organism):
    indexes = zip(refGenome,Organism)
    files = list()
    for idx in indexes:
        if species_counts[idx] > 2:
            files.append(config['output'] + idx[1] + "/" + idx[0] + "/" + config['qcDir'] + idx[1] + "_" + idx[0] + "_qc.html")
        else:
            files.append(config['output'] + idx[1] + "/" + idx[0] + "/" + config['qcDir'] + idx[1] + "_" + idx[0] + ".imiss")
            files.append(config['output'] + idx[1] + "/" + idx[0] + "/" + config['qcDir'] + idx[1] + "_" + idx[0] + ".idepth")
            files.append(config['output'] + idx[1] + "/" + idx[0] + "/" + config['qcDir'] + idx[1] + "_" + idx[0] + "_snpqc.txt")
    return files

rule all:
    input:
    	directory(config['snpEffDir']) + "data/" + directory(config['ingroup']) + "{refGenome}/sequences.fa.gz",
	directory(config['snpEffDir']) + "data/" + directory(config['ingroup']) + "{refGenome}/genes.gff.gz"

include: "rules/snpEff_setup.smk"
